# PROJECT RULES - Vista Nova

## Language Matrix
| Element        | Language    | Notes                           |
|----------------|-------------|---------------------------------|
| Code           | English     | Variables, functions, classes   |
| Comments       | English     | Documentation comments          |
| Technical Docs | English     | READMEs, inline documentation   |
| UI/UX Texts    | Portuguese  | PT-PT orthography "tu" personal |
| Commit Messages| English     | Conventional Commits format     |

## Tech Stack & Architecture
- **Language**: TypeScript (strict mode)
- **Frontend**: Next.js 15+ (App Router)
- **Styling**: Tailwind CSS + shadcn/ui components
- **State Management**: React Context API + React Query
- **Form Handling**: React Hook Form + Zod validation
- **Deployment**: Vercel

## Project Structure
- `/src/app`: Next.js App Router pages and layouts
- `/src/components`: Reusable UI components
  - `/ui`: Base UI components (shadcn)
  - `/layouts`: Layout components
  - `/sections`: Page-specific sections
  - `/providers`: Context providers
- `/src/lib`: Utility functions and helpers
- `/src/hooks`: Custom React hooks
- `/src/styles`: Global styles and Tailwind configuration
- `/src/types`: TypeScript type definitions
- `/public`: Static assets (optimized images, fonts)

## Coding Standards
- Use camelCase for variables/functions, PascalCase for components/classes
- All components must be functional components with TypeScript types
- Prefer named exports over default exports
- Use destructuring for props and state
- Implement proper error boundaries and loading states
- Follow accessibility best practices (WCAG 2.1 AA)

## Workflow
- **New Features**: 
  - Use modular pattern with isolated components
  - Review code every 30 minutes
  - Add comprehensive TypeScript types
  - Include responsive design for all viewports
- **Hotfixes**: 
  - Scope critical changes only
  - Run automated tests before merge
  - Document changes in CHANGELOG.md

## Protected Zones
Protected zones (never change without `/request-access`):
- `src/types/auth.ts` (pair programming review required)
- `src/app/api/*` (manual approval required)
- `src/lib/utils.ts` (core utilities, review required)
- Configuration files (next.config.mjs, tailwind.config.js)

## Quality Gates
| Metric         | Limit    | Tool         | Notes                        |
|----------------|----------|--------------|------------------------------|
| Complexity     | CC < 15  | SonarQube    | Per function/component       |
| Coverage       | >85%     | Jest/Cypress | Priority on critical paths   |
| Tech Debt      | <120min  | CodeClimate  | Resolve within sprint        |
| Accessibility  | WCAG AA  | axe/Lighthouse| No critical issues          |
| Performance    | >90      | Lighthouse   | Mobile & desktop scores      |

## Component Guidelines
- All UI components must:
  - Be responsive across all breakpoints
  - Include proper TypeScript types
  - Support keyboard navigation
  - Have appropriate ARIA attributes
  - Use Tailwind classes for styling
  - Follow the shadcn/ui pattern when applicable

## Image Optimization
- Use Next.js Image component for all images
- Convert static images to WebP format
- Implement proper lazy loading
- Provide appropriate alt text for accessibility
- Run image optimization scripts before deployment

## DevOps Integration
- Auto-commit: `git add -A && git commit -m "feat: [Auto] {task-summary}"`
- Pipeline pre-deploy:
  - Security scan: OWASP ZAP
  - i18n check: PT-PT/BR diff <2%
  - Lighthouse performance audit
  - Type checking and linting

## Exception Handling
- Known errors: Register in `KNOWN_ISSUES.md` with context, workaround, and ETA
- New errors: Run `diagnostic-chain` before fixing
- Log client-side errors with appropriate context
- Implement fallback UI for error states

## Versioning
- Follow semantic versioning (MAJOR.MINOR.PATCH)
- Document all changes in CHANGELOG.md
- Tag releases in git repository
- Include version number in footer or about page
